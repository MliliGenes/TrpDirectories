{
  "meta": {
    "title": "Memory Management Basics",
    "description": "Understanding malloc, free, and memory safety in C programming",
    "tags": ["memory", "malloc", "c programming", "pointers"],
    "difficulty": "beginner",
    "lastUpdated": "2024-09-26"
  },
  "navigation": [
    {"id": "hook", "emoji": "üéØ", "title": "The Hook", "sectionIndex": 0},
    {"id": "mechanics", "emoji": "‚öôÔ∏è", "title": "How It Works", "sectionIndex": 1},
    {"id": "examples", "emoji": "üåç", "title": "Real Examples", "sectionIndex": 2},
    {"id": "practice", "emoji": "üõ†Ô∏è", "title": "Do This Now", "sectionIndex": 3}
  ],
  "sections": [
    {
      "id": "hook",
      "title": "THE HOOK", 
      "emoji": "üéØ",
      "iconClass": "hook",
      "content": [
        {
          "type": "paragraph",
          "content": "<strong>What is this?</strong><br>Dynamic memory management lets you allocate and free memory at runtime using malloc() and free().",
          "html": true
        },
        {
          "type": "paragraph",
          "content": "<strong>Why care?</strong><br>Essential for building flexible programs that can handle varying amounts of data without wasting memory.",
          "html": true
        }
      ]
    },
    {
      "id": "mechanics",
      "title": "HOW IT WORKS",
      "emoji": "‚öôÔ∏è",
      "iconClass": "mechanics",
      "content": [
        {
          "type": "heading",
          "level": 3,
          "content": "Core functions"
        },
        {
          "type": "list",
          "items": [
            "<strong>malloc():</strong> Allocates memory on the heap",
            "<strong>free():</strong> Releases previously allocated memory",
            "<strong>calloc():</strong> Allocates zeroed memory for arrays"
          ]
        }
      ]
    },
    {
      "id": "examples", 
      "title": "REAL EXAMPLES",
      "emoji": "üåç",
      "iconClass": "examples",
      "content": [
        {
          "type": "heading",
          "level": 3,
          "content": "Basic allocation"
        },
        {
          "type": "codeblock",
          "language": "c",
          "code": "int *ptr = malloc(sizeof(int) * 10);\nif (ptr == NULL) {\n    // Handle allocation failure\n    return -1;\n}\n\n// Use the memory\nptr[0] = 42;\n\n// Always free when done\nfree(ptr);\nptr = NULL;  // Prevent accidental reuse"
        }
      ]
    },
    {
      "id": "practice",
      "title": "DO THIS NOW",
      "emoji": "üõ†Ô∏è",
      "iconClass": "practice",
      "content": [
        {
          "type": "actionbox",
          "boxType": "action",
          "content": [
            {
              "type": "list",
              "ordered": true,
              "items": [
                "Write a program that allocates an array of integers",
                "Fill the array with values 1 to N",
                "Print the values and free the memory"
              ]
            }
          ]
        }
      ]
    }
  ]
}